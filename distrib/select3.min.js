(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports);
    global.htmlex = mod.exports;
  }
})(this, function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var Select3 = exports.Select3 = function () {
    function Select3(config) {
      _classCallCheck(this, Select3);

      this.container = qsi(config.containerId);
      this.update(config);
    }

    _createClass(Select3, [{
      key: "update",
      value: function update(config) {
        this.config = config;
        this.filteredData = config.data;
        var ctx = this;
        this.selected = newElement("div", { class: "select-box-selected" }, "", { click: this.toggleCollapse.bind(this, ctx) });
        this.container.beforeEnd(this.selected);
        if (this.config.allowClear) {
          this.cleaner = newElement("p", { class: "cleaner" }, "&#9747;", { click: this.clearSelected.bind(this, ctx) });
          this.container.beforeEnd(this.cleaner);
        }
        if (this.config.withSearch) {
          this.searcher = newElement("input", { type: "text", placeholder: "Search" }, "", { keyup: this.onSearch.bind(this, ctx) });
          this.container.beforeEnd(this.searcher);
        }

        this.items = newElement("div", { tabindex: 0, class: "select-box-items" }, "", { keydown: this.onkeydown.bind(this, ctx) });
        this.container.beforeEnd(this.items);
        this.container.addClass("select-box-values");

        this.selectedInput = newElement("input", { type: "text", name: config.containerId, value: this.val() });
        this.container.afterEnd(this.selectedInput);
        this.render();
      }
    }, {
      key: "render",
      value: function render() {
        if (this.config.disabled) {
          this.selected.addClass("select-disabled");
          this.collapse();
        } else {
          this.selected.class("-select-disabled");
        }
        this.renderSelected();
        this.renderData();
      }
    }, {
      key: "renderSelected",
      value: function renderSelected() {
        var st = this.displayLabels();
        if (st === "") {
          this.selected.innerText = this.config.placeholder;
          this.selected.class("select-novalue");
        } else {
          this.selected.innerText = st;
          this.selected.class("-select-novalue");
        }
        this.selectedInput.val(this.val());
      }
    }, {
      key: "displayLabels",
      value: function displayLabels() {
        var label = this.filteredData.filter(function (x) {
          return x.selected === true;
        }).map(function (x) {
          return x.label;
        }).join(",");
        return label;
      }
    }, {
      key: "redraw",
      value: function redraw() {
        this.filteredData = this.config.data;
        this.renderData();
        this.renderSelected();
      }
    }, {
      key: "clearSelected",
      value: function clearSelected() {
        for (var i = 0; i < this.config.data.length; i++) {
          var it = this.config.data[i];
          if (!it.optgroup && !it.disabled && !it.locked) {
            this.config.data[i].selected = false;
          }
        }
        this.redraw();
      }
    }, {
      key: "inverseSelection",
      value: function inverseSelection() {
        for (var i = 0; i < this.config.data.length; i++) {
          var it = this.config.data[i];
          if (!it.optgroup && !it.disabled && !it.locked) {
            it.selected = !it.selected;
          }
        }
        this.redraw();
      }
    }, {
      key: "selectAll",
      value: function selectAll() {
        for (var i = 0; i < this.config.data.length; i++) {
          var it = this.config.data[i];
          if (!it.optgroup && !it.disabled && !it.locked) {
            it.selected = true;
          }
        }
        this.redraw();
      }
    }, {
      key: "renderData",
      value: function renderData() {
        this.items.html("");
        var ctx = this;
        var index = 0;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = this.filteredData[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var option = _step.value;

            this.renderOption(option, index, ctx);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        this.container.css({ width: this.items.outerWidth() });
        var style = {};
        if (ctx.config.size) {
          style.height = "" + Math.min(+ctx.config.size, ctx.filteredData.length) * 28 + "px";
          ctx.items.css(style);
        }
      }
    }, {
      key: "renderOption",
      value: function renderOption(option, index, ctx) {
        if (!option.optgroup) {
          var cl = "select-box-value";
          if (option.selected) {
            cl += " select-box-value-active";
          }
          var item = newElement("div", { i: index, class: cl, value: option.value }, option.label);
          if (!option.disabled && !option.locked) {
            item.on("click", this.onClickValue.bind(this, ctx, item));
          }
          if (option.disabled) {
            item.class("select-box-disabled");
          }
          this.items.beforeEnd(item);
          index++;
        } else {
          var _item = newElement("div", { class: "select-box-title" }, option.label);
          this.items.beforeEnd(_item);
        }
      }
    }, {
      key: "onkeydown",
      value: function onkeydown(ctx, ev) {
        console.log("key", ev.keyCode);
        if (ev.keyCode === 38 || ev.keyCode === 40) {
          var index = 0;
          var selected = this.items.qs(".select-box-value-active");
          if (selected == null) {
            selected = this.items.childNodes[0];
          }
          if (ev.keyCode === 40) {
            index = +selected.attr("i") + 1;
          } else if (ev.keyCode === 38) {
            index = +selected.attr("i") - 1;
            if (index < 0) {
              index = this.items.childNodes.length - 1;
            }
          }
          var newSelected = this.items.qs("[i='" + index + "']");
          if (newSelected == null) {
            newSelected = this.items.childNodes[0];
          }
          selected.class("-select-box-value-active");
          newSelected.class("select-box-value-active");
          if (newSelected.hasClass("select-box-disabled")) {
            this.onkeydown(ctx, ev);
          }
        } else if (ev.keyCode === 13) {
          var _selected = this.items.qs(".select-box-value-active");
          this.onClickValue(ctx, _selected, ev);
        } else if (ev.keyCode === 65 && ev.ctrlKey && ctx.config.maximumSelectionLength !== 1) {
          ev.cancelBubble = true;
          ev.preventDefault();
          ev.stopImmediatePropagation();
          this.selectAll();
        } else if (ev.keyCode === 73 && ev.ctrlKey && ctx.config.maximumSelectionLength !== 1) {
          this.inverseSelection();
        }
      }
    }, {
      key: "onSearch",
      value: function onSearch(ctx, ev) {
        console.log(ev);
        var text = ctx.searcher.val();
        ctx.filteredData = ctx.config.data.filter(function (x) {
          return x.label.startsWith(text);
        });
        ctx.renderData();
      }
    }, {
      key: "onClickValue",
      value: function onClickValue(ctx, item, ev) {
        var val = item.val();
        var found = ctx.filteredData.find(function (x) {
          return x.value == val;
        });
        found.selected = !found.selected;
        if (!ev.ctrlKey) {
          ctx.filteredData.filter(function (x) {
            return x !== found && x.selected === true;
          }).forEach(function (x) {
            return x.selected = false;
          });
          ctx.items.childNodes.class("-select-box-value-active");
        }
        if (found.selected) {
          item.class("select-box-value-active");
        } else {
          item.class("-select-box-value-active");
        }
        if (!ctx.config.maximumSelectionLength === 1) {
          if (!found.selected) {
            item.removeClass("select-box-value-active");
          } else {
            item.addClass("select-box-value-active");
          }
        }
        this.renderSelected();
        if (ctx.closeOnSelect) {
          ctx.collapse();
        }
      }
    }, {
      key: "collapse",
      value: function collapse() {
        this.items.show(false);
        if (isDef(this.searcher)) {
          this.searcher.show(false);
        }
      }
    }, {
      key: "uncollapse",
      value: function uncollapse() {
        this.items.show();
        if (isDef(this.searcher)) {
          this.searcher.show(true);
        }
      }
    }, {
      key: "toggleCollapse",
      value: function toggleCollapse() {
        if (!this.config.disabled) {
          this.items.toggleVisible();
          if (this.items.isVisible()) {
            this.items.focus();
            this.selected.class("select-box-selected-up");
          } else {
            this.selected.class("-select-box-selected-up");
          }
          if (isDef(this.searcher)) {
            this.searcher.toggleVisible();
            if (this.searcher.isVisible()) {
              this.searcher.focus();
            }
          }
        }
      }
    }, {
      key: "val",
      value: function val(value) {
        if (arguments.length >= 1) {
          var found = this.items.find(function (x) {
            return x.val() === value;
          });
          if (found) {
            found.addClass("select-box-value-active");
          } else {
            console.error("value " + value + " not found");
          }
        } else {
          var label = this.filteredData.filter(function (x) {
            return x.selected === true;
          }).map(function (x) {
            return x.value;
          }).join(",");
          return label;
        }
      }
    }]);

    return Select3;
  }();
});